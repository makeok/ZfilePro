package im.zhaojun.zfile.core.config;import cn.dev33.satoken.interceptor.SaInterceptor;import cn.dev33.satoken.router.SaRouter;import cn.dev33.satoken.router.SaRouterStaff;import cn.dev33.satoken.stp.StpUtil;import im.zhaojun.zfile.module.login.model.enums.RoleEnum;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;/** * SaToken 权限配置, 配置管理员才能访问管理员功能. * * @author zhaojun */@Configurationpublic class SaTokenConfigure implements WebMvcConfigurer {    /**     * 注册权限校验拦截器, 拦截所有 /admin/** 请求, 但登陆相关的接口不需要认证.     * @param   registry     *          拦截器注册器     */    @Override    public void addInterceptors(InterceptorRegistry registry) {        String[] excludeUrls = {"/api/install/status","/api/install",                "/pd/**", //下载自带签名时效，这里放行                "/webdav","/webdav/**",                "/login", "/login/**",                "/error",                "/**/*.css", "/**/*.js", "/**/*.json", "/**/*.json", "/**/*.png", "/**/*.gif", "/**/*.svg"};        // 注册路由拦截器，自定义验证规则        registry.addInterceptor(new SaInterceptor(handle -> {            SaRouter.notMatch(excludeUrls).stop();            SaRouter.match("/**")   // 拦截的 path 列表，可以写多个 */                .notMatch(excludeUrls)      // 排除掉的 path 列表，可以写多个                .check(r -> StpUtil.checkLogin());      // 要执行的校验动作，可以写完整的 lambda 表达式            // 根据路由划分模块，不同模块不同鉴权            // SaRouter.match("/**", StpUtil::checkLogin );            SaRouter.match("/admin/**", r -> StpUtil.checkRole(RoleEnum.ADMIN.getValue()));            // 忽略所有登陆相关接口        }));        //.addPathPatterns("/**").excludePathPatterns(excludeUrls);    }}